---
# Check state of KDC db
- name: Check for existing KDC db
  stat:
    path: '{{ kdc_db_file }}'
  register: kdcdbstat

- name: Configure the KDC DB
  block:
  - name: Create a temp db
    shell: '/usr/sbin/kdb5_util create -s -P {{ kdc_db_password }}'
  - name: Acquire Host Keytab
    shell: "kadmin -p {{ kdc_admin_principal }} -r {{ kerberos_realm }} -w {{ kdc_admin_password }} -q 'ktadd host/{{ kdc_secondary_hostname }}@{{ kerberos_realm }}'"
  tags: [ kdc-init ]
  when: not kdcdbstat.stat.exists
  become: true

- name: Configure kpropd.acl
  block:
  - name: Add primary KDC to ACL
    shell: "echo 'host/{{ kdc_primary_hostname }}@{{ kerberos_realm }}' > {{ kpropd_file }}"
  - name: Add secondary KDC to ACL
    shell: "echo 'host/{{ kdc_secondary_hostname }}@{{ kerberos_realm }}' >> {{ kpropd_file }}"
  tags: [ kdc-init ]
  become: true

- name: Set /var/lib link (ubuntu)
  block:
  - name: Clear existing directory
    file:
      path: '/var/lib/krb5kdc'
      state: absent
  - name: Create /var/lib symlink
    file:
      src: /var/kerberos/krb5kdc
      dest: /var/lib/krb5kdc
      state: link
  tags: [ kdc-init ]
  become: true
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- name: Configure /etc/default DAEMON_ARGS (ubuntu)
  become: true
  copy:
    src: "krb5-kpropd"
    dest: "/etc/default/krb5-kpropd"
    mode: '0644'
  tags: [ kdc-init ]
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- name: Enable kpropd (rhel/centos)
  become: true
  systemd:
    name: kprop
    state: restarted
    daemon_reload: yes
    enabled: yes
  tags: [ kdc-init ]
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: Enable kpropd (ubuntu)
  become: true
  systemd:
    name: krb5-kpropd
    state: restarted
    daemon_reload: yes
    enabled: yes
  tags: [ kdc-init ]
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
